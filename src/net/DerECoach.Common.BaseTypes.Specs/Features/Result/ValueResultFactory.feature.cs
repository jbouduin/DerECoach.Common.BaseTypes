// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DerECoach.Common.BaseTypes.Specs.Features.Result
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValueResultFactory")]
    public partial class ValueResultFactoryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ValueResultFactory.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValueResultFactory", "\tUsing the ValueResultfactory Interface for creating ValueResults", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I have initiated the ValueResultFactory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult without parameters")]
        [NUnit.Framework.CategoryAttribute("ValueResult<TValue>")]
        public virtual void CreateASuccessValueResultWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult without parameters", null, new string[] {
                        "ValueResult<TValue>"});
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 12
 testRunner.When("I call Success(TValue)()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("an IValueResult(TValue) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("IValueResult(TValue).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("IValueResult(TValue).Message is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("IValueResult(TValue).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("IValueResult(TValue).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("IValueResult(TValue).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult with a message omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("ValueResult<TValue>")]
        public virtual void CreateASuccessValueResultWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult with a message omitting the messagelevel parameter", null, new string[] {
                        "ValueResult<TValue>"});
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 22
 testRunner.When("I call Success(TValue)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("an IValueResult(TValue) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("IValueResult(TValue).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("IValueResult(TValue).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("IValueResult(TValue).MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("IValueResult(TValue).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("IValueResult(TValue).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult with a message and a messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("ValueResult<TValue>")]
        public virtual void CreateASuccessValueResultWithAMessageAndAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult with a message and a messagelevel parameter", null, new string[] {
                        "ValueResult<TValue>"});
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 32
 testRunner.When("I call Success(TValue)(tmessage = \"the message\", messageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("an IValueResult(TValue) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("IValueResult(TValue).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("IValueResult(TValue).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("IValueResult(TValue).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("IValueResult(TValue).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("IValueResult(TValue).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("ValueResult<TValue>")]
        public virtual void CreateAFailureValueResultOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult omitting the messagelevel parameter", null, new string[] {
                        "ValueResult<TValue>"});
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 42
 testRunner.When("I call Failure(TValue)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("an IValueResult(TValue) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And("IValueResult(TValue).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("IValueResult(TValue).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("IValueResult(TValue).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("IValueResult(TValue).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("IValueResult(TValue).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult with a messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("ValueResult<TValue>")]
        public virtual void CreateAFailureValueResultWithAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult with a messagelevel parameter", null, new string[] {
                        "ValueResult<TValue>"});
#line 51
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 52
 testRunner.When("I call Failure(TValue)(tmessage = \"the message\", messageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("an IValueResult(TValue) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("IValueResult(TValue).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("IValueResult(TValue).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("IValueResult(TValue).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("IValueResult(TValue).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("IValueResult(TValue).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason> without parameters")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateASuccessValueResultTReasonWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason> without parameters", null, new string[] {
                        "Result<TValue,TReason>"});
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 65
    testRunner.When("I call Success(TValue, string)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("IValueResult(TValue, string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("IValueResult(TValue, string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("IValueResult(TValue, string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason> with a message omitting the messagelevel pa" +
            "rameter")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateASuccessValueResultTReasonWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason> with a message omitting the messagelevel pa" +
                    "rameter", null, new string[] {
                        "Result<TValue,TReason>"});
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 75
 testRunner.When("I call Success(TValue, string)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.And("IValueResult(TValue, string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("IValueResult(TValue, string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("IValueResult(TValue, string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason> with a message and a messagelevel parameter" +
            "")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateASuccessValueResultTReasonWithAMessageAndAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason> with a message and a messagelevel parameter" +
                    "", null, new string[] {
                        "Result<TValue,TReason>"});
#line 85
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 86
 testRunner.When("I call Success(TValue, string)(tmessage = \"the message\", messageLevel =  \"Verbose" +
                    "\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("IValueResult(TValue, string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("IValueResult(TValue, string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("IValueResult(TValue, string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason> omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateAFailureValueResultTReasonOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason> omitting the messagelevel parameter", null, new string[] {
                        "Result<TValue,TReason>"});
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 97
 testRunner.When("I call Failure(TValue, string)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("IValueResult(TValue, string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("IValueResult(TValue, string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("IValueResult(TValue, string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason> with the messagelevel parameter set")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateAFailureValueResultTReasonWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason> with the messagelevel parameter set", null, new string[] {
                        "Result<TValue,TReason>"});
#line 107
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 108
 testRunner.When("I call Failure(TValue, string)(tmessage = \"the message\", messageLevel = \"Verbose\"" +
                    ")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("IValueResult(TValue, string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("IValueResult(TValue, string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("IValueResult(TValue, string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason> with a reason omitting the messagelevel par" +
            "ameter")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateAFailureValueResultTReasonWithAReasonOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason> with a reason omitting the messagelevel par" +
                    "ameter", null, new string[] {
                        "Result<TValue,TReason>"});
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 119
    testRunner.When("I call Failure(TValue, string)(reason = \"the reason\", message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("IValueResult(TValue, string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("IValueResult(TValue, string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And("IValueResult(TValue, string).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason> with a reason with the messagelevel paramet" +
            "er set")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,TReason>")]
        public virtual void CreateAFailureValueResultTReasonWithAReasonWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason> with a reason with the messagelevel paramet" +
                    "er set", null, new string[] {
                        "Result<TValue,TReason>"});
#line 129
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 130
 testRunner.When("I call Failure(TValue, string)(reason = \"the reason\", tmessage = \"the message\", m" +
                    "essageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("an IValueResult(TValue, string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
 testRunner.And("IValueResult(TValue, string).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("IValueResult(TValue, string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("IValueResult(TValue, string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("IValueResult(TValue, string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And("IValueResult(TValue, string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.And("IValueResult(TValue, string).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason, TContext> without parameters")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessValueResultTReasonTContextWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason, TContext> without parameters", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 143
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 144
    testRunner.When("I call Success(TValue, string, NullReferenceException)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason, TContext> with a message\tomitting the messa" +
            "gelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessValueResultTReasonTContextWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason, TContext> with a message\tomitting the messa" +
                    "gelevel parameter", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 155
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 156
 testRunner.When("I call Success(TValue, string, NullReferenceException)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success ValueResult<TReason, TContext> with a message\twith the messagele" +
            "vel parameter set")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessValueResultTReasonTContextWithAMessageWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success ValueResult<TReason, TContext> with a message\twith the messagele" +
                    "vel parameter set", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 167
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 168
 testRunner.When("I call Success(TValue, string, NullReferenceException)(tmessage = \"the message\", " +
                    "messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 170
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> without messagelevel, reason or c" +
            "ontext")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithoutMessagelevelReasonOrContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> without messagelevel, reason or c" +
                    "ontext", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 179
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 180
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 181
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 182
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> with messagelevel, but without re" +
            "ason or context")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithMessagelevelButWithoutReasonOrContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> with messagelevel, but without re" +
                    "ason or context", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 191
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 192
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(tmessage = \"the message\", " +
                    "messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> with a reason, but without contex" +
            "t or messagelevel")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithAReasonButWithoutContextOrMessagelevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> with a reason, but without contex" +
                    "t or messagelevel", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 203
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 204
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(reason = \"the reason\", mes" +
                    "sage = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 205
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 206
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> with a reason and a messagelevel," +
            " but without context")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithAReasonAndAMessagelevelButWithoutContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> with a reason and a messagelevel," +
                    " but without context", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 215
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 216
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(reason = \"the reason\", tme" +
                    "ssage = \"the message\", messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 218
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> with a reason and a context, but " +
            "without messagelevel")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithAReasonAndAContextButWithoutMessagelevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> with a reason and a context, but " +
                    "without messagelevel", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 227
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 228
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(reason = \"the reason\", new" +
                    " NullReferenceException, message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 230
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is a NullReference" +
                    "Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure ValueResult<TReason, TContext> with a reason, context, message A" +
            "nd MessageLevel set")]
        [NUnit.Framework.CategoryAttribute("Result<TValue,")]
        [NUnit.Framework.CategoryAttribute("TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureValueResultTReasonTContextWithAReasonContextMessageAndMessageLevelSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure ValueResult<TReason, TContext> with a reason, context, message A" +
                    "nd MessageLevel set", null, new string[] {
                        "Result<TValue,",
                        "TReason,",
                        "TContext>"});
#line 239
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 240
 testRunner.When("I call Failure(TValue, string, NullReferenceException)(treason = \"the reason\", ne" +
                    "w NullReferenceException, message = \"the message\", messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("an IValueResultEx(TValue, string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Value is set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.And("IValueResultEx(TValue, string, NullReferenceException).Context is a NullReference" +
                    "Exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
