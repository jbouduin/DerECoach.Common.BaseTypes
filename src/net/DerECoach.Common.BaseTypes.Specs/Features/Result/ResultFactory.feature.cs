// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DerECoach.Common.BaseTypes.Specs.Features.Result
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ResultFactory")]
    public partial class ResultFactoryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResultFactory.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ResultFactory", "\tUsing the Resultfactory Interface for creating results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I have initiated the ResultFactory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result without parameters")]
        [NUnit.Framework.CategoryAttribute("Result")]
        public virtual void CreateASuccessResultWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result without parameters", null, new string[] {
                        "Result"});
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 12
 testRunner.When("I call Success()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("an IResult is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("IResult.Message is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("IResult.MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("IResult.Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("IResult.Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result with a message omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result")]
        public virtual void CreateASuccessResultWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result with a message omitting the messagelevel parameter", null, new string[] {
                        "Result"});
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 21
 testRunner.When("I call Success(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("an IResult is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And("IResult.Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("IResult.MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("IResult.Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("IResult.Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result with a message and a messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result")]
        public virtual void CreateASuccessResultWithAMessageAndAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result with a message and a messagelevel parameter", null, new string[] {
                        "Result"});
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 30
 testRunner.When("I call Success(message1 = \"the message\", messageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("an IResult is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.And("IResult.Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("IResult.MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("IResult.Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("IResult.Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result")]
        public virtual void CreateAFailureResultOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result omitting the messagelevel parameter", null, new string[] {
                        "Result"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 39
 testRunner.When("I call Failure(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("an IResult is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("IResult.Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("IResult.MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("IResult.Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("IResult.Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result with a messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result")]
        public virtual void CreateAFailureResultWithAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result with a messagelevel parameter", null, new string[] {
                        "Result"});
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 48
 testRunner.When("I call Failure(message1 = \"the message\", messageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("an IResult is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
 testRunner.And("IResult.Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("IResult.MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("IResult.Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("IResult.Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason> without parameters")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateASuccessResultTReasonWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason> without parameters", null, new string[] {
                        "Result<TReason>"});
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 60
    testRunner.When("I call Success(string)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.And("IResult(string).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("IResult(string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("IResult(string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("IResult(string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason> with a message omitting the messagelevel paramet" +
            "er")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateASuccessResultTReasonWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason> with a message omitting the messagelevel paramet" +
                    "er", null, new string[] {
                        "Result<TReason>"});
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 69
 testRunner.When("I call Success(string)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("IResult(string).MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("IResult(string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("IResult(string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("IResult(string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason> with a message and a messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateASuccessResultTReasonWithAMessageAndAMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason> with a message and a messagelevel parameter", null, new string[] {
                        "Result<TReason>"});
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 79
 testRunner.When("I call Success(string)(message1 = \"the message\", messageLevel =  \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.And("IResult(string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("IResult(string).Succeeded is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("IResult(string).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("IResult(string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason> omitting the messagelevel parameter")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateAFailureResultTReasonOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason> omitting the messagelevel parameter", null, new string[] {
                        "Result<TReason>"});
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 89
 testRunner.When("I call Failure(string)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.And("IResult(string).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("IResult(string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("IResult(string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("IResult(string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason> with the messagelevel parameter set")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateAFailureResultTReasonWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason> with the messagelevel parameter set", null, new string[] {
                        "Result<TReason>"});
#line 98
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 99
 testRunner.When("I call Failure(string)(message1 = \"the message\", messageLevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.And("IResult(string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("IResult(string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("IResult(string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("IResult(string).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason> with a reason omitting the messagelevel paramete" +
            "r")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateAFailureResultTReasonWithAReasonOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason> with a reason omitting the messagelevel paramete" +
                    "r", null, new string[] {
                        "Result<TReason>"});
#line 108
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 109
    testRunner.When("I call Failure(string)(reason = \"the reason\", message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.And("IResult(string).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("IResult(string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("IResult(string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And("IResult(string).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason> with a reason with the messagelevel parameter se" +
            "t")]
        [NUnit.Framework.CategoryAttribute("Result<TReason>")]
        public virtual void CreateAFailureResultTReasonWithAReasonWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason> with a reason with the messagelevel parameter se" +
                    "t", null, new string[] {
                        "Result<TReason>"});
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 119
 testRunner.When("I call Failure(string)(reason = \"the reason\", message1 = \"the message\", messageLe" +
                    "vel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("an IResult(string) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.And("IResult(string).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("IResult(string).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("IResult(string).Succeeded is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("IResult(string).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("IResult(string).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason, TContext> without parameters")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessResultTReasonTContextWithoutParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason, TContext> without parameters", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 131
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 132
    testRunner.When("I call Success(string, NullReferenceException)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("IResultEx(string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason, TContext> with a message\tomitting the messagelev" +
            "el parameter")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessResultTReasonTContextWithAMessageOmittingTheMessagelevelParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason, TContext> with a message\tomitting the messagelev" +
                    "el parameter", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 142
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 143
 testRunner.When("I call Success(string, NullReferenceException)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Info\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("IResultEx(string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a success Result<TReason, TContext> with a message\twith the messagelevel p" +
            "arameter set")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateASuccessResultTReasonTContextWithAMessageWithTheMessagelevelParameterSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a success Result<TReason, TContext> with a message\twith the messagelevel p" +
                    "arameter set", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 153
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 154
 testRunner.When("I call Success(string, NullReferenceException)(message1 = \"the message\", messagel" +
                    "evel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("IResultEx(string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> without messagelevel, reason or contex" +
            "t")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithoutMessagelevelReasonOrContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> without messagelevel, reason or contex" +
                    "t", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 164
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 165
 testRunner.When("I call Failure(string, NullReferenceException)(message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 167
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("IResultEx(string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> with messagelevel, but without reason " +
            "or context")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithMessagelevelButWithoutReasonOrContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> with messagelevel, but without reason " +
                    "or context", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 175
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 176
 testRunner.When("I call Failure(string, NullReferenceException)(message1 = \"the message\", messagel" +
                    "evel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
 testRunner.And("IResultEx(string, NullReferenceException).Reason is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> with a reason, but without context or " +
            "messagelevel")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithAReasonButWithoutContextOrMessagelevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> with a reason, but without context or " +
                    "messagelevel", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 186
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 187
 testRunner.When("I call Failure(string, NullReferenceException)(reason = \"the reason\", message = \"" +
                    "the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.And("IResultEx(string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> with a reason and a messagelevel, but " +
            "without context")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithAReasonAndAMessagelevelButWithoutContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> with a reason and a messagelevel, but " +
                    "without context", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 197
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 198
 testRunner.When("I call Failure(string, NullReferenceException)(reason = \"the reason\", message1 = " +
                    "\"the message\", messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 199
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("IResultEx(string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("IResultEx(string, NullReferenceException).Context is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> with a reason and a context, but witho" +
            "ut messagelevel")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithAReasonAndAContextButWithoutMessagelevel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> with a reason and a context, but witho" +
                    "ut messagelevel", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 208
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 209
 testRunner.When("I call Failure(string, NullReferenceException)(reason = \"the reason\", new NullRef" +
                    "erenceException, message = \"the message\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("IResultEx(string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("IResultEx(string, NullReferenceException).Context is a NullReferenceException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a failure Result<TReason, TContext> with a reason, context, message And Me" +
            "ssageLevel set")]
        [NUnit.Framework.CategoryAttribute("Result<TReason,")]
        [NUnit.Framework.CategoryAttribute("TContext>")]
        public virtual void CreateAFailureResultTReasonTContextWithAReasonContextMessageAndMessageLevelSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a failure Result<TReason, TContext> with a reason, context, message And Me" +
                    "ssageLevel set", null, new string[] {
                        "Result<TReason,",
                        "TContext>"});
#line 219
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 220
 testRunner.When("I call Failure(string, NullReferenceException)(reason1 = \"the reason\", new NullRe" +
                    "ferenceException, message = \"the message\", messagelevel = \"Verbose\")", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
 testRunner.Then("an IResultEx(string, NullReferenceException) is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.And("IResultEx(string, NullReferenceException).MessageLevel is \"Verbose\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("IResultEx(string, NullReferenceException).Message is \"the message\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("IResultEx(string, NullReferenceException).Succeeded \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.And("IResultEx(string, NullReferenceException).Failed is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.And("IResultEx(string, NullReferenceException).Reason is \"the reason\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.And("IResultEx(string, NullReferenceException).Context is a NullReferenceException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
